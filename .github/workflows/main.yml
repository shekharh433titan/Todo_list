name: Notify on PR & Comments

on:
  pull_request:
    types: [opened, closed]

  issue_comment:
    types: [created]

jobs:
  notify-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Notify Flock about PR (Links & Images Only)
        env:
          ACTION: ${{ github.event.action }}
          TITLE: ${{ github.event.pull_request.title }}
          DESCRIPTION: ${{ github.event.pull_request.body }}
          AUTHOR: ${{ github.event.pull_request.user.login }}
          FROM_BRANCH: ${{ github.event.pull_request.head.ref }}
          TO_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          set -e  # exit on first failure

          echo "Original description:"
          echo "$DESCRIPTION"

          if [ -z "$DESCRIPTION" ]; then
            CLEAN_DESC="No description provided."
          else
            # Extract Markdown links
            MARKDOWN_LINKS=$(echo "$DESCRIPTION" | grep -Eo '\[.*?\]\(.*?\)' || true)

            # Extract image markdown ![]() and <img> src URLs
            IMAGE_MARKDOWN=$(echo "$DESCRIPTION" | grep -Eo '!\[.*?\]\(.*?\)' || true)
            IMAGE_TAGS=$(echo "$DESCRIPTION" | grep -Eo '<img [^>]*src="[^"]*"' | sed -E 's/.*src="([^"]*)".*/\1/' || true)

            # Combine extracted data
            CLEAN_DESC="$MARKDOWN_LINKS"$'\n'"$IMAGE_MARKDOWN"$'\n'"$IMAGE_TAGS"
          fi

          echo "Filtered description (Links & Images):"
          echo "$CLEAN_DESC"

          # Escape clean description for JSON (if empty, fallback)
          ESCAPED_DESC=$(echo "${CLEAN_DESC:-No links or images provided.}" | jq -Rsa .)

          JSON_PAYLOAD=$(jq -n \
            --arg action "$ACTION" \
            --arg title "$TITLE" \
            --argjson description "$ESCAPED_DESC" \
            --arg author "$AUTHOR" \
            --arg from "$FROM_BRANCH" \
            --arg to "$TO_BRANCH" \
            --arg url "$PR_URL" \
            '{
              text: "üîî *Pull Request \($action)*\n\n*Title:* \($title)\n\n*Description:*\n\($description)\n\n*Author:* \($author)\n\n*From:* `\($from)` ‚û°Ô∏è *To:* `\($to)`\n\nüîó *PR Link:* \($url)"
            }'
          )

          echo "Sending PR notification payload:"
          echo "$JSON_PAYLOAD"

          curl -X POST -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://api.flock.com/hooks/sendMessage/a90391cd-16c3-486d-8ef5-cf6152075019

  notify-comment:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    runs-on: ubuntu-latest
    steps:
      - name: Notify Flock about PR Comment (Links & Images Only)
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENTER: ${{ github.event.comment.user.login }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
        run: |
          echo "Dump event JSON for debugging:"
          echo '${{ toJSON(github.event) }}'
          
          set -e  # exit on first failure

          echo "Original comment:"
          echo "$COMMENT_BODY"

          if [ -z "$COMMENT_BODY" ]; then
            CLEAN_COMMENT="No comment content provided."
          else
            # Extract Markdown links
            MARKDOWN_LINKS=$(echo "$COMMENT_BODY" | grep -Eo '\[.*?\]\(.*?\)' || true)

            # Extract image markdown ![]() and <img> src URLs
            IMAGE_MARKDOWN=$(echo "$COMMENT_BODY" | grep -Eo '!\[.*?\]\(.*?\)' || true)
            IMAGE_TAGS=$(echo "$COMMENT_BODY" | grep -Eo '<img [^>]*src="[^"]*"' | sed -E 's/.*src="([^"]*)".*/\1/' || true)

            # Combine extracted data
            CLEAN_COMMENT="$MARKDOWN_LINKS"$'\n'"$IMAGE_MARKDOWN"$'\n'"$IMAGE_TAGS"
          fi

          echo "Filtered comment (Links & Images):"
          echo "$CLEAN_COMMENT"

          # Escape clean comment for JSON (if empty, fallback)
          ESCAPED_COMMENT=$(echo "${CLEAN_COMMENT:-No links or images provided.}" | jq -Rsa .)

          JSON_PAYLOAD=$(jq -n \
            --arg commenter "$COMMENTER" \
            --argjson comment "$ESCAPED_COMMENT" \
            --arg issue "$ISSUE_URL" \
            '{
              text: "üí¨ *New comment on PR*\n\n*Commenter:* \($commenter)\n\n*Comment:*\n\($comment)\n\nüîó *PR Link:* \($issue)"
            }'
          )

          echo "Sending comment notification payload:"
          echo "$JSON_PAYLOAD"

          curl -X POST -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            https://api.flock.com/hooks/sendMessage/a90391cd-16c3-486d-8ef5-cf6152075019
